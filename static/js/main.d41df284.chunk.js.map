{"version":3,"sources":["Components/Button.js","Components/ListItem.js","App.js","serviceWorker.js","index.js"],"names":["styles","buttonStyle","backgroundColor","borderColor","color","marginLeft","width","height","fontSize","fontWeight","returnButtonStyle","Button","props","toggle","index","react_default","a","createElement","onClick","toggleButton","style","toggleButton1","ListItem","key","this","i","imageStyle","src","item","imageUrl","alt","name","paddingLeft","snippet","Components_Button","Component","float","App","state","movieCount","reservedCount","data","count","_this","setState","_this2","axios","get","then","response","_this3","map","Components_ListItem","className","paragraphStyle","length","renderList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d41df284.chunk.js","sourcesContent":["import React from 'react';\n\nconst Button = (props) => {\n    if(props.toggle===props.index)\n    {\n        return (\n            <button \n              onClick={props.toggleButton}\n              style={styles.returnButtonStyle}\n            >Return\n            </button> \n        )\n    }\n    else \n    {\n        return (\n            <button  \n              onClick={props.toggleButton1}\n              style={styles.buttonStyle}>\n              Reserve\n            </button>\n        )\n    }\n}\n\nconst styles = {\n    buttonStyle: {\n        backgroundColor: '#337ab7',\n        borderColor: '#2e6da4',\n        color: 'white',\n        marginLeft: 24,\n        width: 80,\n        height: 30,\n        fontSize: 14,\n        fontWeight: 'bold'\n       },\n       returnButtonStyle: {\n        backgroundColor: '#d9534f',\n        borderColor: '#2e6da4',\n        color: 'white',\n        marginLeft: 24,\n        width: 80,\n        height: 30,\n        fontSize: 14,\n        fontWeight: 'bold'\n      \n       }\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport '../App.css';\nimport Button from './Button';\n\nclass ListItem extends Component {\n\n    render(){\n        return (\n            <div>\n                <li key={this.props.i}>\n                  <img style={styles.imageStyle}src={this.props.item.imageUrl} alt=\"\"/>\n                  <span>{this.props.item.name}</span> \n                  <p style={{paddingLeft: 110}}>{this.props.item.snippet}</p> \n                  <Button \n                      toggleButton = {this.props.toggleButton}\n                      toggleButton1 = {this.props.toggleButton1}\n                      toggle = {this.props.i}\n                      index = {this.props.index}\n                  />\n                </li>\n            </div>\n        )\n    }\n \n}\n\nconst styles = {\n  imageStyle: {\n    height: 100, \n    width: 100, \n    float:'left'\n   }\n}\n\nexport default ListItem;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport ListItem from './Components/ListItem'\n\nclass App extends Component {\n\n  state = {\n    movieCount: 0,\n    reservedCount: 0,\n    data: [],\n    index: false\n  }\n\n  componentDidMount() {\n \n    axios.get('https://movie-rental-51a59.firebaseio.com/movies.json')\n      .then((response)=>{\n        var data = response.data\n          this.setState({\n            data: data\n          })\n      })\n  }\n\n  toggleButton = (i) => {\n       var count = this.state.reservedCount-1\n    this.setState({reservedCount: count, index: false })\n  }\n  toggleButton1 = (i) => {  \n       var count = this.state.reservedCount+1\n    this.setState({reservedCount: count, index: i })\n  }\n\n  renderList() {\n      \n        return this.state.data.map((item, i) =>\n        {\n          return( \n           <ListItem \n              key = {i}\n              item = {item}\n              i = {i}\n              toggle = {this.state.toggle}\n              toggleButton = {()=>this.toggleButton(i)}\n              toggleButton1 = {()=>this.toggleButton1(i)}\n              index = {this.state.index}\n           />\n        )\n          }\n        )\n  }\n\n  render() {\n    \n    return (\n      <div className='container-fluid'>\n      <div className='row'>\n\n        <div className='col-md-2'>\n          <p style={styles.paragraphStyle}> The total number of movies : {this.state.data.length} </p>\n          <p style={styles.paragraphStyle}> Number of movies reserved : {this.state.reservedCount}</p>\n        </div>\n\n      \n       <div className='col-md-10'>\n            <ul>\n              {this.renderList()}\n            </ul>\n      </div>\n       \n      </div>\n      </div>\n    )\n  }\n}\n\nconst styles = {\n paragraphStyle: {\n   paddingLeft: 10,\n   fontSize: 14,\n }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}